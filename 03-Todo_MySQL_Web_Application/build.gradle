plugins {
    id 'java'
    id 'war'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.palantir.docker' version '0.36.0'
}

group = 'hodlene.k8s'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
    implementation 'mysql:mysql-connector-java:8.0.33'
    // JSTL
    //implementation 'javax.servlet:jstl' //스프링부트 3.0 미만
    implementation 'jakarta.servlet:jakarta.servlet-api' //스프링부트 3.0 이상
    implementation 'jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api' //스프링부트 3.0 이상
    implementation 'org.glassfish.web:jakarta.servlet.jsp.jstl' //스프링부트 3.0 이상

    // JASPER
    implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // WebJars
    implementation 'org.webjars:jquery:1.9.1'
    implementation 'org.webjars:bootstrap:3.3.6'
    implementation 'org.webjars:bootstrap-datepicker:1.10.0'


    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation  'com.h2database:h2'
}

tasks.named('test') {
    useJUnitPlatform()
}

bootWar {
    archiveBaseName = "${project.name}"
    archiveFileName = "${project.name}-${project.version}.war"
    archiveVersion = "${project.version}"
}

// Define the tag here
def dockerImgName = "moon1z10/k8s-learning:${project.name}-${project.version}"
docker {
    println("gradle docker build start = ${dockerImgName}")
    name dockerImgName
    files tasks.bootWar.outputs.files
    buildArgs(['WAR_FILE': tasks.bootWar.outputs.files.singleFile.name])
}

// Create a task for pushing the Docker image
tasks.register('pushDockerImage') {
    exec {
        commandLine 'docker', 'push', dockerImgName
    }
}